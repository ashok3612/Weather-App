{"version":3,"sources":["Components/Autogrid.js","Components/weather.jsx","Components/mainComponent.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","createIcon","id","icon","size","color","AutoGrid","props","classes","className","Grid","container","spacing","item","xs","style","fontSize","top","currentTemp","iconId","min","max","position","desc","weather","cityWithState","undefined","city","country","temp","minTemp","maxTemp","description","iconCode","realData","errorMsg","autoComplete","onSubmit","eventHandler","TextField","required","placeholder","margin","width","label","Button","type","variant","Maincomponent","state","apiId","weatherData","current","handleEvent","bind","Math","ceil","url","fetch","then","response","status","json","Error","data","dataObj","findTemp","main","temp_min","temp_max","name","sys","setState","catch","error","event","preventDefault","City","target","value","State","api","this","makeApiCall","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd4c6d54.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { WiDaySunny, WiDayStormShowers, WiDaySleet, WiDayRainMix, WiDaySnowWind, WiDaySprinkle, WiDaySunnyOvercast } from \"weather-icons-react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    }\r\n}));\r\n\r\nfunction createIcon(id) {\r\n\r\n    let icon = null;\r\n        if( id >= 200 && id <= 232){icon = <WiDayStormShowers size={70} color='#fff' />;}\r\n        else if( id >= 300 && id <= 321){icon = <WiDaySleet size={70} color='#fff' />;}\r\n        else if( id >= 500 && id <= 531) {icon = <WiDayRainMix size={70} color='#fff' />;}\r\n        else if( id >= 600 && id <= 622) { icon = <WiDaySnowWind size={70} color='#fff' />; }\r\n        else if( id >= 701 && id <= 781) { icon = <WiDaySprinkle size={70} color='#fff' />; }\r\n        else if( id === 800) { icon = <WiDaySunny size={70} color='#fff' />;  }\r\n        else if( id >= 801 && id <= 804) { icon = <WiDaySunnyOvercast size={70} color='#fff' />; }\r\n    return icon;\r\n}\r\n\r\nexport default function AutoGrid(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={4}>\r\n                <Grid item xs></Grid>\r\n                <Grid item xs>\r\n                    <span style={{ fontSize: '40px', top: '10%', color: 'white' }}>{props.currentTemp}&deg;</span><br></br>\r\n                </Grid><Grid item xs>\r\n\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={4}>\r\n                <Grid item xs></Grid>\r\n                <Grid item xs>\r\n                    <div >\r\n                        {createIcon(props.iconId)}\r\n                    </div>\r\n                </Grid><Grid item xs></Grid>\r\n            </Grid>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs></Grid>\r\n                <Grid item xs>\r\n                    <span style={{ fontSize: '30px', color: 'white' }}>Min : {props.min}&deg;</span>\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <span style={{ fontSize: '30px', color: 'white' }}>Max : {props.max}&deg;</span>\r\n                </Grid>\r\n                <Grid item xs></Grid>\r\n            </Grid>\r\n            <br></br>\r\n            <span style={{ fontSize: '20px', color: 'white', top: '25px', position: 'relative' }}>{props.desc}</span>\r\n        </div>\r\n    );\r\n}\r\n","import { Button, TextField } from '@material-ui/core';\r\nimport AutoGrid from './Autogrid'\r\n\r\nfunction weather(props) {\r\n    let cityWithState = props.city === undefined ? '' : `${props.city}, ${props.country}`;\r\n    let currentTemp = props.temp === undefined ? '' : `${props.temp} `;\r\n    let minTemp = props.temp === undefined ? '' : `${props.min} `;\r\n    let maxTemp = props.temp === undefined ? '' : `${props.max} `;\r\n    let description = props.temp === undefined ? '' : `${props.desc} `;\r\n    let icon = props.iconCode === undefined ? '' : `${props.iconCode} `;\r\n\r\n    let realData = props.temp === undefined ? props.errorMsg === true ?\r\n        <span style={{fontSize:'25px', color:'red'}}> &#128531; Sorry, Entered city name was not available in our database &#128531;</span> : null : <AutoGrid\r\n            currentTemp={currentTemp}\r\n            min={minTemp}\r\n            max={maxTemp}\r\n            desc={description}\r\n            iconId={icon}></AutoGrid>\r\n\r\n    return (\r\n        <div className=\"weather\">\r\n            <form autoComplete=\"off\" onSubmit={props.eventHandler}>\r\n                <TextField id=\"standard-basic\" color=\"secondary\" required={true} placeholder=\"Chennai\" style={{ margin: '2%', width: '250px' }} label=\"City\" />\r\n                <TextField id=\"standard-basic2\" style={{ margin: '2%', width: '200px' }} placeholder=\"Tamilnadu\" label=\"State (optional)\" />\r\n                <Button type=\"submit\" variant=\"contained\" color=\"secondary\" style={{ margin: '3%' }}>Get Weather</Button>\r\n            </form>\r\n            <span style={{ fontSize: '40px', color: 'white', top: '20px', margin: '15px', position: 'relative' }}>{cityWithState}</span>\r\n            <div style={{ position: 'relative', top: '30px' }}>\r\n                {realData}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default weather","import React, { Component } from 'react'\r\nimport Weather from './weather.jsx'\r\n\r\nclass Maincomponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            apiId: \"1d6bc12a5a65a7830ea97716617284f2\",\r\n            weatherData: {\r\n                current: undefined,\r\n                min: undefined,\r\n                max: undefined,\r\n                desc: '',\r\n                iconCode: undefined,\r\n                city: undefined,\r\n                state: undefined\r\n            },\r\n            errorMsg : false\r\n        }\r\n\r\n        this.handleEvent = this.handleEvent.bind(this)\r\n    }\r\n\r\n    findTemp(temp) {\r\n        return Math.ceil(temp - 273.15);\r\n    }\r\n    async makeApiCall(url) {\r\n        fetch(url)\r\n            .then(function (response) {\r\n                if (response.status >= 200 && response.status <= 299) {\r\n                    return response.json();\r\n                } else {\r\n                    throw Error(\"City not found\");\r\n                }\r\n            })\r\n            .then(data => {\r\n                const dataObj = {\r\n                    current: this.findTemp(data.main.temp),\r\n                    min: this.findTemp(data.main.temp_min),\r\n                    max: this.findTemp(data.main.temp_max),\r\n                    desc: data.weather[0].description,\r\n                    iconCode: data.weather[0].id,\r\n                    city: data.name,\r\n                    country: data.sys.country\r\n                }\r\n                this.setState({\r\n                    weatherData: dataObj,\r\n                    errorMsg: false\r\n                });\r\n            }).catch(error => \r\n                {\r\n                this.setState({\r\n                    errorMsg : true\r\n                })\r\n                }\r\n                )\r\n    }\r\n\r\n    handleEvent(event) {\r\n        event.preventDefault();\r\n        const City = event.target[0].value;\r\n        const State = event.target[0].value;\r\n        const api = `http://api.openweathermap.org/data/2.5/weather?q=${City},${State}&appid=${this.state.apiId}`;\r\n        this.makeApiCall(api);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1 style={{ color: 'white' }}>Weather App</h1>\r\n                <Weather\r\n                    temp={this.state.weatherData.current}\r\n                    min={this.state.weatherData.min}\r\n                    max={this.state.weatherData.max}\r\n                    iconCode={this.state.weatherData.iconCode}\r\n                    desc={this.state.weatherData.desc}\r\n                    city={this.state.weatherData.city}\r\n                    country={this.state.weatherData.country}\r\n                    name=\"Ashok\"\r\n                    errorMsg = {this.state.errorMsg}\r\n                    eventHandler={this.handleEvent}></Weather>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Maincomponent\r\n","import './App.css';\nimport Maincomponent from './Components/mainComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Maincomponent></Maincomponent>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}